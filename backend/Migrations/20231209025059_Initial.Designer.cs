// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(CatalogDBContext))]
    [Migration("20231209025059_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2641),
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2671)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2673),
                            Name = "Movies",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2674)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2676),
                            Name = "Music",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2677)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2678),
                            Name = "Games",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2679)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2680),
                            Name = "Electronics",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2681)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2683),
                            Name = "Computers",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2684)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2685),
                            Name = "Home",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2686)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2687),
                            Name = "Garden",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2688)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2689),
                            Name = "Tools",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2690)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2691),
                            Name = "Grocery",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2692)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2693),
                            Name = "Health",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2694)
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2695),
                            Name = "Beauty",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2696)
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2697),
                            Name = "Toys",
                            UpdatedAt = new DateTime(2023, 12, 8, 21, 50, 59, 140, DateTimeKind.Local).AddTicks(2699)
                        });
                });

            modelBuilder.Entity("Backend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Backend.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Backend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Backend.Models.PostTag", b =>
                {
                    b.HasOne("Backend.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.HasOne("Backend.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Backend.Models.Post", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Backend.Models.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
